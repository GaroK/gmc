{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gothic Modding Community page This GitHub page is designed to contains community maintained set of articles, tutorials and documentation for everything Gothic. First two Gothic games use the engine called ZenGin developed by Pranha Bytes and Mad Scientists. If you want to know more about the history of the development, there is a heap of information on the Gothic Archive . The content here is not meant to be taken as the holy word of modding. We are just modders sharing our experiences, knowledge and our favorite workflows. Feel free to open a pull request with your article, or propose changes. Note Work in progress","title":"Home"},{"location":"#welcome-to-gothic-modding-community-page","text":"This GitHub page is designed to contains community maintained set of articles, tutorials and documentation for everything Gothic. First two Gothic games use the engine called ZenGin developed by Pranha Bytes and Mad Scientists. If you want to know more about the history of the development, there is a heap of information on the Gothic Archive . The content here is not meant to be taken as the holy word of modding. We are just modders sharing our experiences, knowledge and our favorite workflows. Feel free to open a pull request with your article, or propose changes. Note Work in progress","title":"Welcome to Gothic Modding Community page"},{"location":"Animation/","text":"Animation Animations are fun:tm:","title":"Overview"},{"location":"Animation/#animation","text":"Animations are fun:tm:","title":"Animation"},{"location":"DirectoryStructure/","text":"ZenGin directory structure Modding is all about changing the game files and for that we have to know the directory (folder) structure of a Gothic game. \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 $Templates$ \u2502 \u251c\u2500\u2500 modvdf \u2502 \u2514\u2500\u2500 plugins \u251c\u2500\u2500 Miles \u251c\u2500\u2500 Saves \u251c\u2500\u2500 System \u2502 \u2514\u2500\u2500 Autorun \u2514\u2500\u2500 _work \u2514\u2500\u2500 DATA \u251c\u2500\u2500 Anims \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Meshes \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Music \u251c\u2500\u2500 PRESETS \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 _compiled \u2502 \u2514\u2500\u2500 content \u2502 \u2514\u2500\u2500 CUTSCENE \u251c\u2500\u2500 Sound \u251c\u2500\u2500 Textures \u251c\u2500\u2500 Video \u2514\u2500\u2500 Worlds Data Data directory contains .vdf volumes of the game. These contain anims.vdf - animations, speech.vdf - dubbing, worlds.vdf - world ZEN files. Saves Contains saved games. System The system directory contains the game executable, GothicStarter.exe , GothicStarter_mod.exe , configuration .ini files, mod .ini files and mod icons and description .rtf files. system/Autorun is a Union specific directory, it is default search directory for Daedalus injection scripts with zParserExtender and Union plugins. _work/DATA This is where the magic happens: Anims - contains animations and animated models. _compiled - contains compiled animations Meshes - contains meshes source and compiled files. _compiled - contains compiled meshes Music - contains music files. Scripts _compiled - contains compiled scripts - .dat files Content - contains scripts that make up the content of the game. System - contains scripts that make up the menu. Sound - contains sound effects .wav or .ogg format (only Union) Video - contains videos in .bik format","title":"Directory structure"},{"location":"DirectoryStructure/#zengin-directory-structure","text":"Modding is all about changing the game files and for that we have to know the directory (folder) structure of a Gothic game. \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 $Templates$ \u2502 \u251c\u2500\u2500 modvdf \u2502 \u2514\u2500\u2500 plugins \u251c\u2500\u2500 Miles \u251c\u2500\u2500 Saves \u251c\u2500\u2500 System \u2502 \u2514\u2500\u2500 Autorun \u2514\u2500\u2500 _work \u2514\u2500\u2500 DATA \u251c\u2500\u2500 Anims \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Meshes \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Music \u251c\u2500\u2500 PRESETS \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 _compiled \u2502 \u2514\u2500\u2500 content \u2502 \u2514\u2500\u2500 CUTSCENE \u251c\u2500\u2500 Sound \u251c\u2500\u2500 Textures \u251c\u2500\u2500 Video \u2514\u2500\u2500 Worlds","title":"ZenGin directory structure"},{"location":"DirectoryStructure/#data","text":"Data directory contains .vdf volumes of the game. These contain anims.vdf - animations, speech.vdf - dubbing, worlds.vdf - world ZEN files.","title":"Data"},{"location":"DirectoryStructure/#saves","text":"Contains saved games.","title":"Saves"},{"location":"DirectoryStructure/#system","text":"The system directory contains the game executable, GothicStarter.exe , GothicStarter_mod.exe , configuration .ini files, mod .ini files and mod icons and description .rtf files. system/Autorun is a Union specific directory, it is default search directory for Daedalus injection scripts with zParserExtender and Union plugins.","title":"System"},{"location":"DirectoryStructure/#_workdata","text":"This is where the magic happens: Anims - contains animations and animated models. _compiled - contains compiled animations Meshes - contains meshes source and compiled files. _compiled - contains compiled meshes Music - contains music files. Scripts _compiled - contains compiled scripts - .dat files Content - contains scripts that make up the content of the game. System - contains scripts that make up the menu. Sound - contains sound effects .wav or .ogg format (only Union) Video - contains videos in .bik format","title":"_work/DATA"},{"location":"GettingStarted_ZenGin/","text":"Getting started (ZenGin - Gothic 1 & 2) To get started, you will need Gothic MDK (Mod development kit). MDK contains scripts, engine documentation, tutorials and tools to help you create your own modifications. - Gothic 1 MDK - Gothic 2 MDK - link not yet available MDK Contents The MDK contains a lot of things, let's see whats's inside. Scripts Arguably the most important part of the MDK are the original scripts. ZenGin's scripting language is called Daedalus and the scripts use .d file extension. Most of the functionality in the game is run by these scripts, from human and monster AI, to the routines of NPC, when do they go to bed, when (and where) do they pee, what items should NPCs have in their inventory, how much damage or how valuable an item should be. Of course some things are hard coded in the engine, but there are ways to alter their behaviour, we will discuss that in a later article. TODO: finish this :trollface:","title":"Getting started (ZenGin - Gothic 1 & 2)"},{"location":"GettingStarted_ZenGin/#getting-started-zengin-gothic-1-2","text":"To get started, you will need Gothic MDK (Mod development kit). MDK contains scripts, engine documentation, tutorials and tools to help you create your own modifications. - Gothic 1 MDK - Gothic 2 MDK - link not yet available","title":"Getting started (ZenGin - Gothic 1 &amp; 2)"},{"location":"GettingStarted_ZenGin/#mdk-contents","text":"The MDK contains a lot of things, let's see whats's inside.","title":"MDK Contents"},{"location":"GettingStarted_ZenGin/#scripts","text":"Arguably the most important part of the MDK are the original scripts. ZenGin's scripting language is called Daedalus and the scripts use .d file extension. Most of the functionality in the game is run by these scripts, from human and monster AI, to the routines of NPC, when do they go to bed, when (and where) do they pee, what items should NPCs have in their inventory, how much damage or how valuable an item should be. Of course some things are hard coded in the engine, but there are ways to alter their behaviour, we will discuss that in a later article. TODO: finish this :trollface:","title":"Scripts"},{"location":"GothicVDFS/","text":"GothicVDFS Gothic VDFSis still the most popular VDFS tool. It was created by NicoDE. Download You can download the tool from NicoDE's website - direct link . Quick overview","title":"GothicVDFS"},{"location":"GothicVDFS/#gothicvdfs","text":"Gothic VDFSis still the most popular VDFS tool. It was created by NicoDE.","title":"GothicVDFS"},{"location":"GothicVDFS/#download","text":"You can download the tool from NicoDE's website - direct link .","title":"Download"},{"location":"GothicVDFS/#quick-overview","text":"","title":"Quick overview"},{"location":"Meshes/","text":"Meshes Everything about 3D models in ZenGin.","title":"Overview"},{"location":"Meshes/#meshes","text":"Everything about 3D models in ZenGin.","title":"Meshes"},{"location":"Music/","text":"Music How to get your custom music.","title":"Overview"},{"location":"Music/#music","text":"How to get your custom music.","title":"Music"},{"location":"Scripts/","text":"Scripts ZenGin uses its own scripting language called Daedalus. It is similar to C programming language, so if you know some C programming, it will be quite easy to ge started. The Scripts directory is where the scripts live. You will be able to find Daedalus script files - .d extension and .src files, that list all of the files to be compiled.","title":"Overview"},{"location":"Scripts/#scripts","text":"ZenGin uses its own scripting language called Daedalus. It is similar to C programming language, so if you know some C programming, it will be quite easy to ge started. The Scripts directory is where the scripts live. You will be able to find Daedalus script files - .d extension and .src files, that list all of the files to be compiled.","title":"Scripts"},{"location":"Sound/","text":"Sound Sound effects and dubbing.","title":"Overview"},{"location":"Sound/#sound","text":"Sound effects and dubbing.","title":"Sound"},{"location":"Textures/","text":"Textures Textures are pictures, that get projected on 3D models and onto 2D user interface in the game. In this section we will discuss how to work with textures.","title":"Overview"},{"location":"Textures/#textures","text":"Textures are pictures, that get projected on 3D models and onto 2D user interface in the game. In this section we will discuss how to work with textures.","title":"Textures"},{"location":"VDFS/","text":"VDFS VDFS is the virtual file system used by ZenGin to distribute and store many (but not all) game assest. Tools During the years, the community created different tools to work with VDFS volumes. GothicVDFS viewing extracting bulding .mod and .vdf archives VDFS Tool viewing extracting bulding optimizing compressing .mod and .vdf archives","title":"Virtual file system"},{"location":"VDFS/#vdfs","text":"VDFS is the virtual file system used by ZenGin to distribute and store many (but not all) game assest.","title":"VDFS"},{"location":"VDFS/#tools","text":"During the years, the community created different tools to work with VDFS volumes. GothicVDFS viewing extracting bulding .mod and .vdf archives VDFS Tool viewing extracting bulding optimizing compressing .mod and .vdf archives","title":"Tools"},{"location":"VDFSTool/","text":"VDFS Tool VDFS Tool is a new program that supports new features introduced to VDFS by the Union team. Download You can download the tool from the post on WoP.ru - VDFS Tool or using the Resource Manager Quick overview","title":"VDFS Tool"},{"location":"VDFSTool/#vdfs-tool","text":"VDFS Tool is a new program that supports new features introduced to VDFS by the Union team.","title":"VDFS Tool"},{"location":"VDFSTool/#download","text":"You can download the tool from the post on WoP.ru - VDFS Tool or using the Resource Manager","title":"Download"},{"location":"VDFSTool/#quick-overview","text":"","title":"Quick overview"},{"location":"Video/","text":"Video To get a video cutscene, intro or outro into the game the video needs to be in a proper format - BINK video format .bik . Editing the video Okay, I know this might be a bit out of the scope of this, but the video you recorded has to be edited. My go to editor for this is kdenlive . It works very well, it is free and open source and it supports BINK video as an input, which is great if you want to include subtitles in the video. My version of kdenlive does not knw how to export video straight to .bik , so I just export my video to .mp4 and then convert it with RAD Video Tools. RAD Video Tools RAD Video Tools is a tool for converting other video formats to BINK .bik that Gothic can use. Warning Gothic 1 bink implementation has some problems, in RAD tools you have to set the audio compression to 104 and above to get video to work in Gothic 1. NicoDE's comment: Add 100 to the audio compression level when encoding videos, e.g. 104 for level 4 with old sound format (should be mentioned in the RAD Video Tools documentation) for G1 without updated Miles libraries. Note Newest Union (1.0m at the time of writing) has a new patch for BINK video playback. The issue with sound should be fixed.","title":"Overview"},{"location":"Video/#video","text":"To get a video cutscene, intro or outro into the game the video needs to be in a proper format - BINK video format .bik .","title":"Video"},{"location":"Video/#editing-the-video","text":"Okay, I know this might be a bit out of the scope of this, but the video you recorded has to be edited. My go to editor for this is kdenlive . It works very well, it is free and open source and it supports BINK video as an input, which is great if you want to include subtitles in the video. My version of kdenlive does not knw how to export video straight to .bik , so I just export my video to .mp4 and then convert it with RAD Video Tools.","title":"Editing the video"},{"location":"Video/#rad-video-tools","text":"RAD Video Tools is a tool for converting other video formats to BINK .bik that Gothic can use. Warning Gothic 1 bink implementation has some problems, in RAD tools you have to set the audio compression to 104 and above to get video to work in Gothic 1. NicoDE's comment: Add 100 to the audio compression level when encoding videos, e.g. 104 for level 4 with old sound format (should be mentioned in the RAD Video Tools documentation) for G1 without updated Miles libraries. Note Newest Union (1.0m at the time of writing) has a new patch for BINK video playback. The issue with sound should be fixed.","title":"RAD Video Tools"},{"location":"Worlds/","text":"Worlds Worlds, in ZenGin saved in .ZEN files, are archives that contain the world mesh (model), BSP tree and the information of all objects in the world. Spacer is used to create these .ZEN files. There are other world editors.","title":"Overview"},{"location":"Worlds/#worlds","text":"Worlds, in ZenGin saved in .ZEN files, are archives that contain the world mesh (model), BSP tree and the information of all objects in the world. Spacer is used to create these .ZEN files. There are other world editors.","title":"Worlds"},{"location":"c_item/","text":"C_ITEM Daedalus class The C_ITEM class as it is defined in Scripts/Content/_intern/Clases.d script file. CLASS C_Item { // F\u00fcr alle Items VAR INT id ; VAR STRING name , nameID ; VAR INT hp , hp_max ; VAR INT mainflag , flags ; // Hauptflag und weitere Flags VAR INT weight , value ; // F\u00fcr Waffen VAR INT damageType ; // Welche Schadensarten VAR INT damageTotal ; VAR INT damage [ DAM_INDEX_MAX ] ; // F\u00fcr R\u00fcstungen VAR INT wear ; VAR INT protection [ PROT_INDEX_MAX ]; // F\u00fcr Nahrung VAR INT nutrition ; // HP-Steigerung bei Nahrung // Ben\u00f6tigte Attribute zum Benutzen des Items VAR INT cond_atr [ 3 ] ; VAR INT cond_value [ 3 ] ; // Attribute, die bei anlegen des Items ver\u00e4ndert werden VAR INT change_atr [ 3 ] ; VAR INT change_value [ 3 ] ; // Parserfunktionen VAR FUNC magic ; // Parserfunktion zum \"Magie Header\" VAR FUNC on_equip ; // Parserfunktion, wenn Item equipped wird. VAR FUNC on_unequip ; // Parserfunktion, wenn Item unequipped wird. VAR FUNC on_state [ 4 ] ; // Besitzer VAR FUNC owner ; // Besitzer : Instanz-Name VAR INT ownerGuild ; // Besitzer : Gilde VAR INT disguiseGuild ; // Zur Schau getragene Gilde durch Verkleidung // Die 3DS-Datei VAR STRING visual ; // Ver\u00e4nderung des NSC-Meshes beim Anlegen dieses Gegenstandes VAR STRING visual_change ; // ASC - File VAR STRING effect ; // Effekt Instanz VAR INT visual_skin ; VAR STRING scemeName ; VAR INT material ; // VAR STRING pfx ; // Magic Weapon PFX VAR INT munition ; // Instance of Munition var int spell ; var int range ; var int mag_circle ; VAR STRING description ; VAR STRING text [ ITM_TEXT_MAX ] ; VAR INT count [ ITM_TEXT_MAX ] ; // inventory darstellungs geschichten, wird nur benutzt, falls von 0 abweichend var int inv_zbias ; // wie weit ist das item im inventory richtung far plane verschoben (integer scale 100=1) var int inv_rotx ; // wieviel grad um die x achse ist das item im inv gedreht var int inv_roty ; // wieviel grad um die y achse ist das item im inv gedreht var int inv_rotz ; // wieviel grad um die z achse ist das item im inv gedreht var int inv_animate ; // soll das item in inv rotiert werden }; It has many member variables, but not all of them are used for every item. But it is not necessary to define every one of these variables for every item, as it was discussed here . Creating your own item Since the C_ITEM class contains all information for every item type. As with everything, it is best to look at how it has been done in the game. You can look into your own game into the Item directory Content/Items (provided you have installed the MDK). Or Vaana's unified scripts Example: Sword As an example we can take the rusty sword you can find at the start in Gothic. Here it is in the scripts . INSTANCE ItMw_1H_Sword_Old_01 ( C_Item ) { name = \"Rusty Sword\" ; mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; visual = \"ItMw_1H_Sword_Old_01.3DS\" ; description = name ; TEXT [ 2 ] = NAME_Damage ; COUNT [ 2 ] = damageTotal ; TEXT [ 3 ] = NAME_Str_needed ; COUNT [ 3 ] = cond_value [ 2 ]; TEXT [ 4 ] = NAME_OneHanded ; TEXT [ 5 ] = NAME_Value ; COUNT [ 5 ] = value ; }; Let's go over the code. First we define new instance instance then the identifier (you may recognize these as the MARVIN mode insert codes) and then in parentheses that contain the class or prototype . Then come the curly brackets in which we define the member variables we want to. name - type string - the focus name of the item (as you can see it on the ground) mainflag - type int - determines in what inventory category the item belongs to flag - type int - determines more granular category - one handed sword, key, bow, etc. value - type int - the value of the item damageTotal - type int - how much damage the weapon does damagetype - type int - damage type (more information on Inside-gothic ) range - type int - the range of the weapon cond_atr - type int array - cond_value - type int array - visaul - type string - the model the item is going to have in-game description - name of the item in your inventory, in this case we just assign the name value text - type string array - array of strings, that shows up on the left side in the item info box count - type int array - array of integers, that shows up on the right side in the item info box","title":"C_ITEM"},{"location":"c_item/#c_item-daedalus-class","text":"The C_ITEM class as it is defined in Scripts/Content/_intern/Clases.d script file. CLASS C_Item { // F\u00fcr alle Items VAR INT id ; VAR STRING name , nameID ; VAR INT hp , hp_max ; VAR INT mainflag , flags ; // Hauptflag und weitere Flags VAR INT weight , value ; // F\u00fcr Waffen VAR INT damageType ; // Welche Schadensarten VAR INT damageTotal ; VAR INT damage [ DAM_INDEX_MAX ] ; // F\u00fcr R\u00fcstungen VAR INT wear ; VAR INT protection [ PROT_INDEX_MAX ]; // F\u00fcr Nahrung VAR INT nutrition ; // HP-Steigerung bei Nahrung // Ben\u00f6tigte Attribute zum Benutzen des Items VAR INT cond_atr [ 3 ] ; VAR INT cond_value [ 3 ] ; // Attribute, die bei anlegen des Items ver\u00e4ndert werden VAR INT change_atr [ 3 ] ; VAR INT change_value [ 3 ] ; // Parserfunktionen VAR FUNC magic ; // Parserfunktion zum \"Magie Header\" VAR FUNC on_equip ; // Parserfunktion, wenn Item equipped wird. VAR FUNC on_unequip ; // Parserfunktion, wenn Item unequipped wird. VAR FUNC on_state [ 4 ] ; // Besitzer VAR FUNC owner ; // Besitzer : Instanz-Name VAR INT ownerGuild ; // Besitzer : Gilde VAR INT disguiseGuild ; // Zur Schau getragene Gilde durch Verkleidung // Die 3DS-Datei VAR STRING visual ; // Ver\u00e4nderung des NSC-Meshes beim Anlegen dieses Gegenstandes VAR STRING visual_change ; // ASC - File VAR STRING effect ; // Effekt Instanz VAR INT visual_skin ; VAR STRING scemeName ; VAR INT material ; // VAR STRING pfx ; // Magic Weapon PFX VAR INT munition ; // Instance of Munition var int spell ; var int range ; var int mag_circle ; VAR STRING description ; VAR STRING text [ ITM_TEXT_MAX ] ; VAR INT count [ ITM_TEXT_MAX ] ; // inventory darstellungs geschichten, wird nur benutzt, falls von 0 abweichend var int inv_zbias ; // wie weit ist das item im inventory richtung far plane verschoben (integer scale 100=1) var int inv_rotx ; // wieviel grad um die x achse ist das item im inv gedreht var int inv_roty ; // wieviel grad um die y achse ist das item im inv gedreht var int inv_rotz ; // wieviel grad um die z achse ist das item im inv gedreht var int inv_animate ; // soll das item in inv rotiert werden }; It has many member variables, but not all of them are used for every item. But it is not necessary to define every one of these variables for every item, as it was discussed here .","title":"C_ITEM Daedalus class"},{"location":"c_item/#creating-your-own-item","text":"Since the C_ITEM class contains all information for every item type. As with everything, it is best to look at how it has been done in the game. You can look into your own game into the Item directory Content/Items (provided you have installed the MDK). Or Vaana's unified scripts","title":"Creating your own item"},{"location":"c_item/#example-sword","text":"As an example we can take the rusty sword you can find at the start in Gothic. Here it is in the scripts . INSTANCE ItMw_1H_Sword_Old_01 ( C_Item ) { name = \"Rusty Sword\" ; mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; visual = \"ItMw_1H_Sword_Old_01.3DS\" ; description = name ; TEXT [ 2 ] = NAME_Damage ; COUNT [ 2 ] = damageTotal ; TEXT [ 3 ] = NAME_Str_needed ; COUNT [ 3 ] = cond_value [ 2 ]; TEXT [ 4 ] = NAME_OneHanded ; TEXT [ 5 ] = NAME_Value ; COUNT [ 5 ] = value ; }; Let's go over the code. First we define new instance instance then the identifier (you may recognize these as the MARVIN mode insert codes) and then in parentheses that contain the class or prototype . Then come the curly brackets in which we define the member variables we want to. name - type string - the focus name of the item (as you can see it on the ground) mainflag - type int - determines in what inventory category the item belongs to flag - type int - determines more granular category - one handed sword, key, bow, etc. value - type int - the value of the item damageTotal - type int - how much damage the weapon does damagetype - type int - damage type (more information on Inside-gothic ) range - type int - the range of the weapon cond_atr - type int array - cond_value - type int array - visaul - type string - the model the item is going to have in-game description - name of the item in your inventory, in this case we just assign the name value text - type string array - array of strings, that shows up on the left side in the item info box count - type int array - array of integers, that shows up on the right side in the item info box","title":"Example: Sword"}]}